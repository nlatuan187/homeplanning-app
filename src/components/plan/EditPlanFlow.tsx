"use client";

import { useMemo, useState } from "react";
import { useRouter } from "next/navigation";
import { Plan, PlanFamilySupport } from "@prisma/client";
import { toast } from "react-hot-toast";

// Import c√°c component section
import QuickCheck from "@/components/onboarding/sections/QuickCheck";
import FamilySupport from "@/components/onboarding/sections/FamilySupport";
import Spending from "@/components/onboarding/sections/Spending";
import { OnboardingPlanState } from "@/components/onboarding/types";
import LoadingStep from "@/components/onboarding/shared/LoadingStep";
import { RecalculationResult } from "@/components/onboarding/shared/ResultStep";
import Image from "next/image";
import { PlanWithDetails } from "@/lib/calculations/projections/generateProjections";
import { Button } from "@/components/ui/button";
import { ArrowLeftIcon, Home } from "lucide-react";
import ProgressBar from "../onboarding/shared/ProgressBar";
import FinancialSliders from "./playground/FinancialSliders";
import AccumulationChart from "./playground/AccumulationChart";
import { generateAccumulationMilestones } from "@/lib/calculations/projections/generateChartData";
import { useUser } from "@clerk/nextjs";
import { confirmPurchaseYear } from "@/actions/confirmPurchaseYear";
import { 
  updateQuickCheckSection, 
  updateFamilySupportSection, 
  updateSpendingSection,
  runProjectionForPlan
} from "@/actions/editPlan";
import { useDebounce } from "@/hooks/useDebounce"; // Import hook debounce
import { updateSinglePlanField } from "@/actions/editPlan"; // Import action m·ªõi
import { useEffect } from "react"; // Import useEffect
import { cn } from "@/lib/utils";
import { DataKey } from "@/lib/calculations/projections/generateChartData";

const assumptionData = [
  {
    key: "pctSalaryGrowth" as const,
    chartDataKey: "pctSalaryGrowth" as const,
    name: "Ti·ªÅn l∆∞∆°ng",
    title: "T·ªëc ƒë·ªô tƒÉng l∆∞∆°ng",
    label: "T·ªëc ƒë·ªô tƒÉng l∆∞∆°ng h√†ng nƒÉm c·ªßa b·∫°n l√† bao nhi√™u?",
    subExplanation: "T·∫°i sao c·∫ßn tƒÉng l∆∞∆°ng √≠t nh·∫•t 7%/nƒÉm?",
    explanation: "Ti·ªÅn l∆∞∆°ng c√≥ th·ªÉ coi l√† ƒë√≤n b·∫©y l·ªõn nh·∫•t, v√† ƒë·ªÉ nhanh ch√≥ng mua ƒë∆∞·ª£c nh√†, b·∫°n s·∫Ω c·∫ßn n·ªó l·ª±c tƒÉng l∆∞∆°ng. M·ª©c tƒÉng l∆∞∆°ng trung b√¨nh ·ªü Vi·ªát Nam l√† 7%.",
    min: 0,
    max: 20,
    step: 1,
    suffix: "%",
  },
  {
    key: "pctHouseGrowth" as const,
    chartDataKey: "pctHouseGrowth" as const,
    name: "Gi√° nh√†",
    title: "T·ªëc ƒë·ªô tƒÉng gi√° nh√†",
    label: "T·ªëc ƒë·ªô tƒÉng gi√° nh√† l√† 10%/nƒÉm (d·ª±a tr√™n d·ªØ li·ªáu th·ªã tr∆∞·ªùng). B·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh theo khu v·ª±c c·ªßa b·∫°n n·∫øu mu·ªën.",
    subExplanation: "T·∫°i sao gi√° nh√† l·∫°i tƒÉng 10%/nƒÉm?",
    explanation: "Nhu c·∫ßu nh√† ·ªü cao, t·ªëc ƒë·ªô ƒë√¥ th·ªã h√≥a nhanh, chi ph√≠ x√¢y d·ª±ng tƒÉng v√† d√≤ng ti·ªÅn ƒë·∫ßu t∆∞ li√™n t·ª•c ƒë·ªï v√†o b·∫•t ƒë·ªông s·∫£n. Ngo√†i ra, ƒë√¢y c≈©ng l√† m·ª©c tƒÉng gi√° ·ªïn ƒë·ªãnh h·∫±ng nƒÉm, nh·∫•t l√† t·∫°i TP.HCM v√† H√† N·ªôi ‚Äì n∆°i qu·ªπ ƒë·∫•t khan hi·∫øm v√† h·∫° t·∫ßng li√™n t·ª•c m·ªü r·ªông.",
    min: 0,
    max: 20,
    step: 1,
    suffix: "%",
  },
  {
    key: "pctInvestmentReturn" as const,
    chartDataKey: "pctInvestmentReturn" as const,
    name: "T√≠ch l≈©y c·ªßa b·∫°n",
    title: "T·ª∑ su·∫•t t√≠ch l≈©y",
    label: "B·∫°n c√≥ th·ªÉ ƒë·∫ßu t∆∞ v·ªõi t·ª∑ l·ªá l·ª£i nhu·∫≠n bao nhi√™u?",
    subExplanation: "T·∫°i sao c·∫ßn ƒë·∫ßu t∆∞ sinh l·ªùi 11%/nƒÉm?",
    explanation: "T·ªëc ƒë·ªô tƒÉng gi√° nh√† trung b√¨nh l√† 10%/nƒÉm, v√¨ v·∫≠y b·∫°n c·∫ßn ƒë·∫ßu t∆∞ v·ªõi t·ª∑ su·∫•t sinh l·ªùi cao h∆°n t·ªëc ƒë·ªô tƒÉng gi√° nh√†, √≠t nh·∫•t l√† 11%/nƒÉm.",
    min: 0,
    max: 25,
    step: 1,
    suffix: "%",
  }
];

// ƒê·ªãnh nghƒ©a c√°c section trong lu·ªìng ch·ªânh s·ª≠a
type EditPlanSection = 'quickCheck' | 'familySupport' | 'spending' | 'assumptions';

// M·ªü r·ªông ki·ªÉu Plan ƒë·ªÉ bao g·ªìm c·∫£ familySupport
type PlanWithFamilySupport = Plan & {
  familySupport: PlanFamilySupport | null;
};

interface EditPlanFlowProps {
  initialPlan: PlanWithFamilySupport;
}

// +++ COMPONENT M·ªöI CHO B∆Ø·ªöC FORM C·ª¶A ASSUMPTION +++
function AssumptionFormStep({
  planData,
  assumptions,
  assumptionStep,
  onSliderChange,
  onNext,
  onPrev,
  router,
}: {
  planData: PlanWithFamilySupport;
  assumptions: any;
  assumptionStep: number;
  onSliderChange: (key: "pctSalaryGrowth" | "pctHouseGrowth" | "pctInvestmentReturn", value: number) => void;
  onNext: () => void;
  onPrev: () => void;
  router: any;
}) {
  const dataKey = assumptionData[assumptionStep].chartDataKey;
  const chartData = useMemo(() => {
    const tempPlan = {
      ...planData,
      pctSalaryGrowth: assumptions.pctSalaryGrowth,
      pctHouseGrowth: assumptions.pctHouseGrowth,
      pctInvestmentReturn: assumptions.pctInvestmentReturn,
    };
    return generateAccumulationMilestones(tempPlan as PlanWithDetails, dataKey as DataKey);
  }, [planData, assumptions, dataKey]);

  const currentAssumption = assumptionData[assumptionStep];
  const isLastStep = assumptionStep === assumptionData.length - 1;

  return (
    <div className="flex flex-col h-full flex-grow w-full max-w-5xl mx-auto fixed inset-0">
      <div className=" z-10 bg-slate-950">
        {/* Header Section */}
        <div className="mb-4">
          <div className="relative flex items-center h-10 mb-4 mt-2">
            <div className="absolute left-0 top-1/2 -translate-y-1/2">
              <Button variant="ghost" size="icon" onClick={onPrev} disabled={assumptionStep === 0}>
                <ArrowLeftIcon className="w-6 h-6 text-white" />
              </Button>
            </div>

            <div className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 font-semibold text-white text-lg">
              Gi·∫£ ƒë·ªãnh & chi·∫øn l∆∞·ª£c
            </div>
          </div>
          <ProgressBar current={assumptionStep + 1} total={assumptionData.length} />
        </div>
      </div>

      <div className="z-10 bg-slate-950 px-2 mt-3">
        <div className="p-2 w-full">
          <h2 className="text-lg font-semibold text-white max-w-5xl mt-2">{currentAssumption.label}</h2>
          <div className="py-2">
            <FinancialSliders
              items={[{
                label: currentAssumption.title,
                value: assumptions[currentAssumption.key],
                setValue: (value) => onSliderChange(currentAssumption.key, value),
                max: currentAssumption.max,
                min: currentAssumption.min,
                suffix: currentAssumption.suffix,
              }]}
            />
          </div>
          <div className="w-full h-auto rounded-md p-2">
            <AccumulationChart data={chartData} dataKey={currentAssumption.chartDataKey} name={currentAssumption.name} />
          </div>
          <p className="text-xs text-left text-cyan-500 mt-2">{currentAssumption.subExplanation}</p>
          <p className="text-xs text-left text-slate-400 mt-2 mb-2">{currentAssumption.explanation}</p>
        </div>

        {/* Action Button */}
        <div className="fixed bottom-0 left-0 right-0 w-full max-w-5xl mx-auto p-4 bg-slate-950 border-t border-slate-800 z-10">
            <Button 
              onClick={onNext} 
              className={cn(
                "w-full text-lg font-semibold rounded-sm",
                isLastStep
                  ? "bg-cyan-500 text-white hover:bg-[#008C96]"
                  : "bg-white text-slate-900 hover:bg-slate-200",
              )}
            >
                {isLastStep ? "Ch·ªët v√† L·∫≠p k·∫ø ho·∫°ch" : "Ti·∫øp t·ª•c"}
            </Button>
        </div>
      </div>
    </div>
  );
}

// +++ COMPONENT M·ªöI CHO B∆Ø·ªöC RESULT C·ª¶A ASSUMPTION +++
function AssumptionResultStep({
  planData,
  result,
  setAssumptionUiStep,
  router,
}: {
  planData: PlanWithFamilySupport;
  result: any;
  setAssumptionUiStep: (step: 'form') => void;
  router: any;
}) {
  const { user } = useUser();
  const handleFinalChoice = async (purchaseYear: number) => {
    await confirmPurchaseYear(planData.id, purchaseYear);
    router.push(`/dashboard`);
  };

  return (
    <div className="max-w-5xl mx-auto fixed inset-0 flex flex-col z-10 bg-slate-950 text-white">
      <div className="relative flex items-center h-10 mb-4">
        <div className="absolute left-0 top-1/2 -translate-y-1/2">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => router.push(`/dashboard`)}
          >
            <ArrowLeftIcon className="w-6 h-6 text-white" />
          </Button>
        </div>
      </div>
      <h2 className="text-2xl font-bold mb-2 mx-4 text-cyan-500">{user?.firstName}, </h2>
      {
        // Case 1: Can purchase, but later than planned
        result.earliestPurchaseYear >= (planData.confirmedPurchaseYear ?? Infinity) && (result.earliestPurchaseYear - new Date().getFullYear() <= 3 && result.earliestPurchaseYear - planData.confirmedPurchaseYear! >= 1) ? (
          <div className="flex flex-col mx-4">
            <div className="text-lg mb-4">
              K·∫ø ho·∫°ch <br />
              <div className="text-cyan-500 font-bold">chinh ph·ª•c cƒÉn nh√† ƒë·∫ßu ti√™n</div>
              c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng.
            </div>
            <div className="flex items-center justify-center text-center">
              <Image src="/onboarding/result 1.png" alt="Gi·∫£ ƒë·ªãnh & Chi·∫øn l∆∞·ª£c" width={300} height={300} className="mb-6" />
            </div>
            <div className="text-center text-slate-400">
              B·∫°n c√≥ th·ªÉ mua nh√† s·ªõm nh·∫•t v√†o nƒÉm {result.earliestPurchaseYear}
            </div>
            <div className="mb-4 items-center justify-center text-center">B·∫°n mu·ªën ƒëi·ªÅu ch·ªânh mong mu·ªën kh√¥ng, hay gi·ªØ nguy√™n v√† l√πi th·ªùi gian mua nh√†?<br />üëáüëáüëá</div>
            <div className="fixed bottom-0 left-0 right-0 w-full max-w-5xl mx-auto p-4 bg-slate-950 border-t border-slate-800 z-10">
              <div className="mt-auto pt-4">
                <Button
                  onClick={() => setAssumptionUiStep('form')}
                  variant="outline"
                  className="w-full bg-slate-700 py-4 font-semibold border-slate-600 text-lg hover:bg-slate-600 text-slate-200 cursor-pointer"
                >
                  ƒêi·ªÅu ch·ªânh mong mu·ªën
                </Button>
              </div>
              <div className="mt-auto pt-4">
                <Button onClick={() => handleFinalChoice(result.earliestPurchaseYear)} className="w-full hover:bg-gray-300 py-4 text-lg font-semibold rounded-sm shadow-lg cursor-pointer">
                  Mua nh√† nƒÉm {result.earliestPurchaseYear}
                </Button>
              </div>
            </div>
          </div>
          // Case 2: Can purchase earlier or on time
        ) : (result.earliestPurchaseYear > 0 && result.earliestPurchaseYear - new Date().getFullYear() <= 3 && result.earliestPurchaseYear - planData.confirmedPurchaseYear! >= 1) ? (
          <div className="flex flex-col mx-4">
            <div className="text-lg mb-4">
              K·∫ø ho·∫°ch <br />
              <div className="text-cyan-500 font-bold">chinh ph·ª•c cƒÉn nh√† ƒë·∫ßu ti√™n</div>
              c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng.
            </div>
            <div className="flex items-center justify-center text-center">
              <Image src="/onboarding/result 2.png" alt="Gi·∫£ ƒë·ªãnh & Chi·∫øn l∆∞·ª£c" width={300} height={300} className="mb-6" />
            </div>
            <div className="text-center text-slate-400">
              B·∫°n c√≥ th·ªÉ mua nh√† v√†o nƒÉm {planData.confirmedPurchaseYear} nh∆∞ mong mu·ªën, th·∫≠m ch√≠ c√≥ th·ªÉ mua s·ªõm h∆°n v√†o nƒÉm {result.earliestPurchaseYear}!
            </div>
            <div className="mb-4 items-center justify-center text-center">H√£y ch·ªçn th·ªùi gian b·∫°n mu·ªën mua nh√†!<br />üëáüëáüëá</div>
            <div className="fixed bottom-0 left-0 right-0 w-full max-w-5xl mx-auto p-4 bg-slate-950 border-t border-slate-800 z-10">
              <div className="mt-auto pt-4">
                <Button
                  onClick={() => handleFinalChoice(result.earliestPurchaseYear)}
                  variant="outline"
                  className="w-full bg-slate-700 py-4 font-semibold border-slate-600 text-lg hover:bg-slate-600 text-slate-200 cursor-pointer"
                >
                  Mua nh√† nƒÉm {result.earliestPurchaseYear}
                </Button>
              </div>
              <div className="mt-auto pt-4">
                <Button onClick={() => handleFinalChoice(planData.confirmedPurchaseYear!)} className="w-full hover:bg-gray-300 py-4 text-lg font-semibold rounded-sm shadow-lg cursor-pointer">
                  Mua nh√† nƒÉm {planData.confirmedPurchaseYear}
                </Button>
              </div>
            </div>

          </div>
          // Case 3: Cannot purchase
        ) : (
          <div className="flex flex-col mx-4">
            <div className="text-lg mb-4">
              B·∫°n s·∫Ω c·∫ßn ƒëi·ªÅu ch·ªânh nhi·ªÅu ƒë·ªÉ<br />
              <div className="text-cyan-500 font-bold">chinh ph·ª•c cƒÉn nh√† ƒë·∫ßu ti√™n</div>
            </div>
            <div className="flex items-center justify-center text-center">
              <Image src="/onboarding/result 3.png" alt="Gi·∫£ ƒë·ªãnh & Chi·∫øn l∆∞·ª£c" width={300} height={300} className="mb-6" />
            </div>
            <div className="text-center text-slate-400">
              B·∫°n v·∫´n ch∆∞a th·ªÉ mua ƒë∆∞·ª£c nh√†, s·∫Ω c·∫ßn r·∫•t nhi·ªÅu thay ƒë·ªïi v·ªÅ mong mu·ªën v√† kh·∫£ nƒÉng t√≠ch lu·ªπ ƒë·∫•y!
            </div>
            <div className="fixed bottom-0 left-0 right-0 w-full max-w-5xl mx-auto p-4 bg-slate-950 border-t border-slate-800 z-10">
              <Button onClick={() => setAssumptionUiStep('form')} className="w-full hover:bg-gray-300 py-4 text-lg font-semibold rounded-sm shadow-lg cursor-pointer">
                ƒêi·ªÅu ch·ªânh mong mu·ªën
              </Button>
            </div>
          </div>
        )}
    </div>
  );
}

export default function EditPlanFlow({ initialPlan }: EditPlanFlowProps) {
  const router = useRouter();
  const [assumptionStep, setAssumptionStep] = useState(0);
  
  // State ƒë·ªÉ qu·∫£n l√Ω section ƒëang hi·ªÉn th·ªã
  const [currentSection, setCurrentSection] = useState<EditPlanSection>('quickCheck');
  const [result, setResult] = useState<any | null>(null);
  // State ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu plan xuy√™n su·ªët qu√° tr√¨nh ch·ªânh s·ª≠a
  // Kh·ªüi t·∫°o v·ªõi d·ªØ li·ªáu ban ƒë·∫ßu ƒë∆∞·ª£c truy·ªÅn v√†o
  const [planData, setPlanData] = useState<PlanWithFamilySupport>(initialPlan);

  // STATE M·ªöI: Qu·∫£n l√Ω c√°c b∆∞·ªõc nh·ªè b√™n trong section Assumption
  const [assumptionUiStep, setAssumptionUiStep] = useState<'intro' | 'form' | 'loading' | 'result'>('intro');

  // --- LOGIC M·ªöI CHO ASSUMPTION ---

  // State `assumptions` v·∫´n ƒë∆∞·ª£c d√πng ƒë·ªÉ ƒëi·ªÅu khi·ªÉn UI c·ªßa slider ngay l·∫≠p t·ª©c
  const [assumptions, setAssumptions] = useState({
      pctSalaryGrowth: initialPlan.pctSalaryGrowth ?? 7,
      pctHouseGrowth: initialPlan.pctHouseGrowth ?? 10,
      pctInvestmentReturn: initialPlan.pctInvestmentReturn ?? 11,
  });

  // S·ª≠ d·ª•ng debounce cho gi√° tr·ªã assumptions
  const debouncedAssumptions = useDebounce(assumptions, 500); // Ch·ªù 500ms sau khi ng∆∞·ªùi d√πng ng·ª´ng k√©o

  // useEffect ƒë·ªÉ theo d√µi s·ª± thay ƒë·ªïi c·ªßa gi√° tr·ªã ƒë√£ debounce
  useEffect(() => {
      // H√†m n√†y s·∫Ω so s√°nh gi√° tr·ªã ƒë√£ debounce v·ªõi gi√° tr·ªã ban ƒë·∫ßu (initialPlan)
      // ƒë·ªÉ ch·ªâ g·ªçi update cho nh·ªØng tr∆∞·ªùng th·ª±c s·ª± thay ƒë·ªïi.
      const updateChangedFields = async () => {
          if (debouncedAssumptions.pctSalaryGrowth !== initialPlan.pctSalaryGrowth) {
              await updateSinglePlanField(initialPlan.id, 'pctSalaryGrowth', debouncedAssumptions.pctSalaryGrowth);
          }
          if (debouncedAssumptions.pctHouseGrowth !== initialPlan.pctHouseGrowth) {
              await updateSinglePlanField(initialPlan.id, 'pctHouseGrowth', debouncedAssumptions.pctHouseGrowth);
          }
          if (debouncedAssumptions.pctInvestmentReturn !== initialPlan.pctInvestmentReturn) {
              await updateSinglePlanField(initialPlan.id, 'pctInvestmentReturn', debouncedAssumptions.pctInvestmentReturn);
          }
          // Sau khi update, c√≥ th·ªÉ refresh l·∫°i d·ªØ li·ªáu plan ƒë·ªÉ initialPlan lu√¥n m·ªõi nh·∫•t
          // router.refresh(); // C√¢n nh·∫Øc d√πng ƒë·ªÉ tr√°nh stale data
      };

      updateChangedFields();

  }, [debouncedAssumptions, initialPlan.id, initialPlan]);


  // H√†m n√†y ƒë∆∞·ª£c truy·ªÅn v√†o component Assumption
  const handleSliderChange = (key: keyof typeof assumptions, value: number) => {
      setAssumptions((prev) => ({ ...prev, [key]: value }));
      // C·∫≠p nh·∫≠t c·∫£ planData ƒë·ªÉ bi·ªÉu ƒë·ªì ƒë∆∞·ª£c v·∫Ω l·∫°i ngay l·∫≠p t·ª©c
      setPlanData((prev) => ({ ...prev, [key]: value }));
  };

  // N√∫t "Ti·∫øp theo" ·ªü cu·ªëi Assumption b√¢y gi·ªù s·∫Ω ch·ªâ t√≠nh to√°n v√† hi·ªÉn th·ªã k·∫øt qu·∫£
  const handleAssumptionsSubmit = async () => {
      setAssumptionUiStep('loading');
      // G·ªçi action ch·ªâ ƒë·ªÉ t√≠nh to√°n, kh√¥ng c·∫ßn truy·ªÅn data v√¨ DB ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
      const result = await runProjectionForPlan(initialPlan.id); // C·∫ßn m·ªôt action m·ªõi ch·ªâ ƒë·ªÉ t√≠nh to√°n

      if (result.success) {
          setResult(result as unknown as RecalculationResult);
          setAssumptionUiStep('result');
      } else {
          toast.error(result.error || "L·ªói khi t√≠nh to√°n");
          setAssumptionUiStep('form');
      }
  };

  // C√°c h√†m x·ª≠ l√Ω khi m·ªôt section ho√†n th√†nh ƒë·ªÉ chuy·ªÉn sang section ti·∫øp theo
  const handleQuickCheckCompleted = async (data: Partial<OnboardingPlanState>) => {
    toast.loading("ƒêang l∆∞u...");
    const result = await updateQuickCheckSection(planData.id, data);
    toast.dismiss();

    if (result.success) {
        setPlanData(prev => ({ ...prev, ...data }));
        setCurrentSection('familySupport');
    } else {
        toast.error(result.error || "L∆∞u th·∫•t b·∫°i");
    }
  };

  const handleFamilySupportCompleted = async (data: Partial<OnboardingPlanState>) => {
    toast.loading("ƒêang l∆∞u...");
    const result = await updateFamilySupportSection(planData.id, data);
    toast.dismiss();

    if (result.success) {
        setPlanData(prev => ({ ...prev, ...data })); // C·∫≠p nh·∫≠t state ƒë·ªÉ truy·ªÅn cho c√°c b∆∞·ªõc sau
        setCurrentSection('spending');
    } else {
        toast.error(result.error || "L∆∞u th·∫•t b·∫°i");
        setCurrentSection('quickCheck');
    }
  };

  const handleSpendingCompleted = async (data: Partial<OnboardingPlanState>) => {
    toast.loading("ƒêang l∆∞u...");
    const result = await updateSpendingSection(planData.id, data);
    toast.dismiss();

    if (result.success) {
        setPlanData(prev => ({ ...prev, ...data })); // C·∫≠p nh·∫≠t state ƒë·ªÉ truy·ªÅn cho c√°c b∆∞·ªõc sau
        setCurrentSection('assumptions');
    } else {
        toast.error(result.error || "L∆∞u th·∫•t b·∫°i");
    }
  };
  // C·∫≠p nh·∫≠t logic render
  const renderSection = () => {
    switch (currentSection) {
      case 'quickCheck':
        // Component QuickCheck s·∫Ω c·∫ßn ƒë∆∞·ª£c refactor ƒë·ªÉ nh·∫≠n initialData v√† planId
        return (
          <QuickCheck
            quickCheck={planData as OnboardingPlanState}
            // @ts-ignore - Gi·∫£ ƒë·ªãnh component s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ nh·∫≠n props n√†y
            initialData={planData}
            planId={planData.id}
            onCompleted={handleQuickCheckCompleted}
            isEditMode={true}
          />
        );

      case 'familySupport':
        return (
          <FamilySupport
            initialData={planData as OnboardingPlanState}
            familySupport={planData.familySupport as OnboardingPlanState}
            planId={planData.id}
            onSubmit={handleFamilySupportCompleted}
            isEditMode={true}
          />
        );

      case 'spending':
        return (
          <Spending
            initialData={planData as OnboardingPlanState}
            plan={planData as OnboardingPlanState}
            planId={planData.id}
            onCompleted={handleSpendingCompleted}
            isEditMode={true} // <-- B√ÅO CHO N√ì BI·∫æT ƒêANG ·ªû LU·ªíNG EDIT
          />
        );
      
      case 'assumptions':
        const handleNextAssumptionStep = () => {
          if (assumptionStep < 2) {
            setAssumptionStep(prev => prev + 1);
          } else {
            handleAssumptionsSubmit();
          }
        };

        const handlePrevAssumptionStep = () => {
          if (assumptionStep > 0) {
            setAssumptionStep(prev => prev - 1);
          }
        };

        switch (assumptionUiStep) {
          case 'intro':
            return (
              <>
                <div
                  className="max-w-5xl mx-auto fixed inset-0 bg-cover bg-center z-0"
                  style={{ backgroundImage: "url('/onboarding/section4bg.png')" }}
                />
                <div className="max-w-5xl mx-auto fixed inset-0 flex flex-col p-8 z-10">
                  <div className="flex-grow flex flex-col items-center justify-center text-center">
                    <div className="text-white/80 font-semibold mb-8">M·ª•c 3/3</div>
                    <Image src="/icons/suitcase 4.png" alt="Gi·∫£ ƒë·ªãnh & Chi·∫øn l∆∞·ª£c" width={80} height={80} className="mb-6" />
                    <h1 className="text-4xl max-md:text-3xl font-bold text-white mb-3">
                      Gi·∫£ ƒë·ªãnh & Chi·∫øn l∆∞·ª£c
                    </h1>
                    <p className="text-lg text-white/90 max-w-lg">
                      H√£y th·ª≠ t∆∞ duy nh∆∞ m·ªôt nh√† ho·∫°ch ƒë·ªãnh chi·∫øn l∆∞·ª£c. B·∫±ng c√°ch ƒëi·ªÅu ch·ªânh c√°c gi·∫£ ƒë·ªãnh, b·∫°n s·∫Ω th·∫•y t√°c ƒë·ªông c·ªßa t·ª´ng quy·∫øt ƒë·ªãnh ƒë·∫øn t·ªëc ƒë·ªô ch·∫°m tay v√†o ng√¥i nh√† m∆° ∆∞·ªõc.
                    </p>
                  </div>
                  <Button onClick={() => setAssumptionUiStep("form")} className="w-full bg-white text-slate-900 hover:bg-slate-200 py-4 text-lg font-semibold rounded-sm shadow-lg transition-transform transform active:scale-95">
                    B·∫Øt ƒë·∫ßu th√¥i
                  </Button>
                </div>
              </>
            );
          
          case 'form':
            return (
              <AssumptionFormStep
                planData={planData}
                assumptions={assumptions}
                assumptionStep={assumptionStep}
                onSliderChange={handleSliderChange}
                onNext={handleNextAssumptionStep}
                onPrev={handlePrevAssumptionStep}
                router={router}
              />
            );
            
          case 'loading':
            return <LoadingStep title="ƒêang c·∫≠p nh·∫≠t & t√≠nh to√°n l·∫°i" message="Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i gi√¢y..." />;
            
          case 'result':
            return (
              <AssumptionResultStep
                planData={planData}
                result={result}
                setAssumptionUiStep={setAssumptionUiStep}
                router={router}
              />
            );
        }
    }
  };

  return (
    <div className="flex flex-col items-center min-h-screen bg-slate-950 text-white w-full">
      <div className="w-full max-w-5xl flex flex-col h-full flex-1">
        {renderSection()}
      </div>
    </div>
  );
}